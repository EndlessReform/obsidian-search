import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs/promises";

const prod = process.argv[2] === "production";

const binaryFilesPlugin = {
	name: "binary-files-loader",
	setup(build) {
		// Handle both .wasm and binary files
		build.onResolve({ filter: /\.(wasm|data|tar\.gz)$/ }, (args) => {
			// Just use the path directly from the import
			return {
				path: args.path,
				namespace: "binary",
			};
		});

		build.onLoad(
			{ filter: /\.wasm$/, namespace: "binary" },
			async (args) => {
				const buffer = await fs.readFile(args.path);
				return {
					contents: `
          const wasmBinary = new Uint8Array(${JSON.stringify(Array.from(buffer))});
          export default WebAssembly.compile(wasmBinary);
        `,
				};
			},
		);

		build.onLoad(
			{ filter: /\.data$/, namespace: "binary" },
			async (args) => {
				const buffer = await fs.readFile(args.path);
				return {
					contents: `export default new Uint8Array(${JSON.stringify(Array.from(buffer))});`,
				};
			},
		);

		build.onLoad(
			{ filter: /\.tar\.gz$/, namespace: "binary" },
			async (args) => {
				const buffer = await fs.readFile(args.path);
				return {
					contents: `
          const blob = new Blob([new Uint8Array(${JSON.stringify(Array.from(buffer))})], { type: 'application/gzip' });
          export default new URL(URL.createObjectURL(blob));
        `,
				};
			},
		);
	},
};

const context = await esbuild.context({
	entryPoints: ["src/main.ts"],
	banner: {
		js: `/*
    THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
    if you want to view the source, please visit the github repository of this plugin
    */`,
	},
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins,
	],
	format: "cjs",
	target: "esnext",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	plugins: [binaryFilesPlugin],
	minify: prod,
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
